diff --git a/font-patcher b/font-patcher
index 581eaee59..67efec23c 100755
--- a/font-patcher
+++ b/font-patcher
@@ -9,7 +9,8 @@ from __future__ import absolute_import, print_function, unicode_literals
 script_version = "3.6.1"
 
 version = "2.3.3"
-projectName = "Nerd Fonts"
+subFamily = ""
+projectName = "Nerds"
 projectNameAbbreviation = "NF"
 projectNameSingular = projectName[:-1]
 
@@ -387,12 +388,19 @@ class font_patcher:
             sourceFonts[0].generateTtc(outfile, sourceFonts[1:], flags=gen_flags, layer=layer)
             message = "   Generated {} fonts\n   \===> '{}'".format(len(sourceFonts), outfile)
         else:
-            fontname = sourceFont.fullname
+            # FOR SARASA
+            fontname = sourceFont.familyname
             if not fontname:
                 fontname = sourceFont.cidfontname
-            outfile = os.path.normpath(os.path.join(
-                sanitize_filename(self.args.outputdir, True),
-                sanitize_filename(fontname) + self.args.extension))
+            # FOR SARASA
+            outfile = os.path.normpath(
+                os.path.join(sanitize_filename(self.args.outputdir, True),
+                '-'.join(sanitize_filename(fontname).split())
+                             + '-'
+                             + get_subfamily(
+                                 sourceFont.fontname
+                                 ).replace(" ", "")
+                             + self.args.extension)).lower()
             bitmaps = str()
             if len(self.sourceFont.bitmapSizes):
                 if not self.args.quiet:
@@ -434,6 +442,10 @@ class font_patcher:
             print("Warning: Source font is a variable open type font (VF) and the patch results will most likely not be what you want")
         print(message)
 
+        # FOR SARASA: build hdmx table
+        print("Building hdmx table and fix post table")
+        post_fix(outfile)
+
         if self.args.postprocess:
             subprocess.call([self.args.postprocess, outfile])
             print("\nPost Processed: {}".format(outfile))
@@ -459,45 +471,15 @@ class font_patcher:
             additionalFontNameSuffix = " " + projectNameAbbreviation
         else:
             additionalFontNameSuffix = verboseAdditionalFontNameSuffix
-        if not self.args.complete:
-            # NOTE not all symbol fonts have appended their suffix here
-            if self.args.fontawesome:
-                additionalFontNameSuffix += " A"
-                verboseAdditionalFontNameSuffix += " Plus Font Awesome"
-            if self.args.fontawesomeextension:
-                additionalFontNameSuffix += " AE"
-                verboseAdditionalFontNameSuffix += " Plus Font Awesome Extension"
-            if self.args.octicons:
-                additionalFontNameSuffix += " O"
-                verboseAdditionalFontNameSuffix += " Plus Octicons"
-            if self.args.powersymbols:
-                additionalFontNameSuffix += " PS"
-                verboseAdditionalFontNameSuffix += " Plus Power Symbols"
-            if self.args.codicons:
-                additionalFontNameSuffix += " C"
-                verboseAdditionalFontNameSuffix += " Plus Codicons"
-            if self.args.pomicons:
-                additionalFontNameSuffix += " P"
-                verboseAdditionalFontNameSuffix += " Plus Pomicons"
-            if self.args.fontlogos:
-                additionalFontNameSuffix += " L"
-                verboseAdditionalFontNameSuffix += " Plus Font Logos"
-            if self.args.material:
-                additionalFontNameSuffix += " MDI"
-                verboseAdditionalFontNameSuffix += " Plus Material Design Icons"
-            if self.args.weather:
-                additionalFontNameSuffix += " WEA"
-                verboseAdditionalFontNameSuffix += " Plus Weather Icons"
-
-        # if all source glyphs included simplify the name
-        else:
-            additionalFontNameSuffix = " " + projectNameSingular + " Complete"
-            verboseAdditionalFontNameSuffix = " " + projectNameSingular + " Complete"
+        # FOR SARASA: clean file name
+        additionalFontNameSuffix = " " + projectNameSingular
+        verboseAdditionalFontNameSuffix = " " + projectNameSingular
 
         # add mono signifier to end of name
-        if self.args.single:
-            additionalFontNameSuffix += " M"
-            verboseAdditionalFontNameSuffix += " Mono"
+        # FOR SARASA: clean file name
+        # if self.args.single:
+        #     additionalFontNameSuffix += " M"
+        #     verboseAdditionalFontNameSuffix += " Mono"
 
         if FontnameParserOK and self.args.makegroups:
             use_fullname = isinstance(font.fullname, str) # Usually the fullname is better to parse
@@ -529,6 +511,9 @@ class font_patcher:
 
         # dont trust 'font.familyname'
         familyname = fontname
+        # FOR SARASA
+        familyname = "Sarasa Term SC"
+        fallbackStyle = get_subfamily(font.fontname)
 
         # fullname (filename) can always use long/verbose font name, even in windows
         if font.fullname != None:
@@ -642,11 +627,8 @@ class font_patcher:
         }
 
         projectInfo = (
-            "Patched with '" + projectName + " Patcher' (https://github.com/ryanoasis/nerd-fonts)\n\n"
-            "* Website: https://www.nerdfonts.com\n"
+            "Patched with 'Sarasa Term SC Nerd Patcher' (https://github.com/laishulu/Sarasa-Term-SC-Nerd)\n\n"
             "* Version: " + version + "\n"
-            "* Development Website: https://github.com/ryanoasis/nerd-fonts\n"
-            "* Changelog: https://github.com/ryanoasis/nerd-fonts/blob/-/changelog.md"
         )
 
         familyname = replace_font_name(familyname, reservedFontNameReplacements)
@@ -662,13 +644,37 @@ class font_patcher:
         if not (FontnameParserOK and self.args.makegroups):
             # replace any extra whitespace characters:
             font.familyname = " ".join(familyname.split())
-            font.fullname   = " ".join(fullname.split())
-            font.fontname   = " ".join(fontname.split())
+            # FOR SARASA
+            font.fullname   = font.familyname + " " + subFamily
+            font.fontname   = font.familyname.replace(
+                " ", "-") + "-" + subFamily.replace(" ", "-")
+
+            font.appendSFNTName(str("English (US)"), str("UniqueID"), font.fullname)
+            font.appendSFNTName(str("Chinese (PRC)"), str("UniqueID"), chn(font.fullname))
+            font.appendSFNTName(str('English (US)'), str('Fullname'), font.fullname)
+            font.appendSFNTName(str("Chinese (PRC)"), str("Fullname"), chn(font.fullname))
+
+            if(subFamily in ["Regular", "Italic", "Bold", "Bold Italic"]):
+                font.appendSFNTName(str('English (US)'), str('Family'), font.familyname)
+                font.appendSFNTName(str('Chinese (PRC)'), str('Family'), chn(font.familyname))
+                font.appendSFNTName(str('English (US)'), str('SubFamily'), subFamily)
+                font.appendSFNTName(str('Chinese (PRC)'), str('SubFamily'), subFamily)
+            else:
+                if (subFamily.endswith("Italic")):
+                    font.appendSFNTName(str('English (US)'), str('Family'), font.fullname.rstrip("Italic").strip())
+                    font.appendSFNTName(str('Chinese (PRC)'), str('Family'), chn(font.fullname.rstrip("Italic").strip()))
+                    font.appendSFNTName(str('English (US)'), str('SubFamily'), "Italic")
+                    font.appendSFNTName(str('Chinese (PRC)'), str('SubFamily'), "Italic")
+                else:
+                    font.appendSFNTName(str('English (US)'), str('Family'), font.fullname)
+                    font.appendSFNTName(str('Chinese (PRC)'), str('Family'), chn(font.fullname))
+                    font.appendSFNTName(str('English (US)'), str('SubFamily'), "Regular")
+                    font.appendSFNTName(str('Chinese (PRC)'), str('SubFamily'), "Regular")
 
             font.appendSFNTName(str('English (US)'), str('Preferred Family'), font.familyname)
-            font.appendSFNTName(str('English (US)'), str('Family'), font.familyname)
-            font.appendSFNTName(str('English (US)'), str('Compatible Full'), font.fullname)
-            font.appendSFNTName(str('English (US)'), str('SubFamily'), subFamily)
+            font.appendSFNTName(str('Chinese (PRC)'), str('Preferred Family'), chn(font.familyname))
+            font.appendSFNTName(str('English (US)'), str('Preferred Styles'), subFamily)
+            font.appendSFNTName(str('Chinese (PRC)'), str('Preferred Styles'), subFamily)
         else:
             fam_suffix = projectNameSingular if not self.args.windows else projectNameAbbreviation
             if self.args.single:
@@ -692,6 +698,8 @@ class font_patcher:
             self.sourceFont.version = str(self.sourceFont.cidversion) + ";" + projectName + " " + version
         self.sourceFont.sfntRevision = None # Auto-set (refreshed) by fontforge
         self.sourceFont.appendSFNTName(str('English (US)'), str('Version'), "Version " + self.sourceFont.version)
+        # FOR SARASA: set version
+        self.sourceFont.appendSFNTName(str('Chinese (PRC)'), str('Version'), "版本 " + self.sourceFont.version)
         # print("Version now is {}".format(sourceFont.version))
 
 
@@ -734,6 +742,8 @@ class font_patcher:
                 sys.exit(projectName + ": Font will not be patched! Give --mono (or -s, or --use-single-width-glyphs) twice to force patching")
         if width_mono:
             force_panose_monospaced(self.sourceFont)
+        # FOR SARASA
+        force_panose_monospaced(self.sourceFont)
 
 
     def setup_patch_set(self):
@@ -1075,7 +1085,8 @@ class font_patcher:
 
         # print("FINI hhea {} typo {} win {} use {}     {}      {}".format(hhea_btb, typo_btb, win_btb, use_typo, our_btb != hhea_btb, self.sourceFont.fontname))
 
-        self.font_dim = {'xmin': 0, 'ymin': 0, 'xmax': 0, 'ymax': 0, 'width' : 0, 'height': 0}
+        self.font_dim = {'xmin': 0, 'ymin': 0, 'xmax': 0, 'ymax': 0, 'width' : 0, 'height': 0, 'em': 0}
+        self.font_dim['em'] = self.sourceFont.em
 
         if metrics == Metric.HHEA:
             self.font_dim['ymin'] = self.sourceFont.hhea_descent - half_gap(self.sourceFont.hhea_linegap, False)
@@ -1173,11 +1184,14 @@ class font_patcher:
             return (1.0, 1.0)
 
         target_width = self.font_dim['width'] * self.get_target_width(stretch)
+        # FOR SARASA:
+        target_width = self.font_dim['width'] * 1
         scale_ratio_x = target_width / sym_dim['width']
 
         # font_dim['height'] represents total line height, keep our symbols sized based upon font's em
         # Use the font_dim['height'] only for explicit 'y' scaling (not 'pa')
-        target_height = self.font_dim['height']
+        # FOR SARASA: https://github.com/laishulu/Sarasa-Term-SC-Nerd/issues/1#issuecomment-663814468
+        target_height = self.font_dim['em']
         scale_ratio_y = target_height / sym_dim['height']
 
         if 'pa' in stretch:
@@ -1887,6 +1901,61 @@ def main():
     for f in sourceFonts:
         f.close()
 
+# FOR SARASA: extract subFamily from font name
+def get_subfamily(fontname):
+    segs = fontname.split('-')
+    if len([x for x in ["light", "bold"]
+            if x in segs[-2].lower()]) > 0:
+        subFamily = ' '.join(segs[-2:])
+    else:
+        subFamily = segs[-1]
+    return subFamily
+
+def chn(name):
+    return name.replace("Sarasa Term SC", "终端更纱黑体-简")
+
+
+# FOR SARASA: build hdmx table
+import sys
+import math
+from fontTools.ttLib import TTFont, newTable
+
+def post_fix(filename):
+    font = TTFont(filename, recalcBBoxes=False)
+    build_hdmx(font)
+    fix_isFixedPitch(font)
+    font.save(filename)
+    font.close()
+
+def build_hdmx(font):
+    headFlagInstructionsMayAlterAdvanceWidth = 0x0010
+    sarasaHintPpemMin = 11
+    sarasaHintPpemMax = 48
+
+    originalFontHead = font["head"]
+    originalFontHmtx = font["hmtx"]
+
+    originalFontHead.flags |= headFlagInstructionsMayAlterAdvanceWidth
+
+    hdmxTable = newTable("hdmx")
+    hdmxTable.hdmx = {}
+
+    # build hdmx table for odd and hinted ppems only.
+    for ppem in range(
+        math.floor(sarasaHintPpemMin / 2) * 2 + 1, sarasaHintPpemMax + 1, 2
+    ):
+        halfUpm = originalFontHead.unitsPerEm / 2
+        halfPpem = math.ceil(ppem / 2)
+        hdmxTable.hdmx[ppem] = {
+            name: math.ceil(width / halfUpm) * halfPpem
+            for name, (width, _) in originalFontHmtx.metrics.items()
+        }
+
+    font["hdmx"] = hdmxTable
+
+def fix_isFixedPitch(font):
+    post = font["post"].__dict__
+    post["isFixedPitch"] = 1
 
 if __name__ == "__main__":
     __dir__ = os.path.dirname(os.path.abspath(__file__))
